basePath: /v1
consumes:
    - application/json
definitions:
    Book:
        description: Book represents a book in the system
        properties:
            genres:
                description: Genres of the book
                example:
                    - sci-fi
                    - action
                    - adventure
                items:
                    type: string
                type: array
                x-go-name: Genres
            id:
                description: The unique ID of the book
                example: 13
                format: int64
                type: integer
                x-go-name: ID
            pages:
                description: The number of pages in the book
                example: "134"
                format: int64
                type: string
                x-go-name: Pages
            published:
                description: The year the book was published
                example: 2018
                format: int64
                type: integer
                x-go-name: Published
            title:
                description: The title of the book
                example: Black Panther
                type: string
                x-go-name: Title
            version:
                description: Version number of the book record
                example: 1
                format: int64
                type: integer
                x-go-name: Version
        required:
            - id
            - title
            - published
        type: object
        x-go-package: github.com/themilar/plibrary/internal/models
    PaginationMetadata:
        description: PaginationMetadata contains pagination information
        properties:
            current_page:
                description: The current page number
                example: 2
                format: int64
                type: integer
                x-go-name: CurrentPage
            first_page:
                description: The first page number
                example: 1
                format: int64
                type: integer
                x-go-name: FirstPage
            last_page:
                description: The last page number
                example: 7
                format: int64
                type: integer
                x-go-name: LastPage
            page_size:
                description: Number of items per page
                example: 2
                format: int64
                type: integer
                x-go-name: PageSize
        required:
            - current_page
            - page_size
            - first_page
            - last_page
        type: object
        x-go-package: github.com/themilar/plibrary/cmd/api
host: localhost:4000
info:
    description: 'Documentation of the plibrary API:'
    title: plibrary API documentation
    version: 1.0.0
paths:
    /books:
        get:
            operationId: listBooks
            parameters:
                - default: 1
                  description: The page number for pagination
                  example: 2
                  format: int64
                  in: query
                  maximum: 1000
                  minimum: 1
                  name: page
                  type: integer
                  x-go-name: Page
                - default: 12
                  description: Number of items per page
                  example: 20
                  format: int64
                  in: query
                  maximum: 20
                  minimum: 1
                  name: size
                  type: integer
                  x-go-name: Size
                - description: Filter by genre
                  example: sci-fi
                  in: query
                  name: genre
                  type: string
                  x-go-name: Genre
                - default: title
                  description: Sort results by field
                  enum:
                    - title
                    - published
                    - pages
                    - -title
                    - -published
                    - -pages
                  example: published
                  in: query
                  name: sort
                  type: string
                  x-go-name: Sort
            tags:
                - books
        post:
            operationId: createBook
            produces:
                - application/json
            responses:
                "201":
                    $ref: '#/responses/bookDetail'
                "400":
                    $ref: '#/responses/badRequest'
                "422":
                    $ref: '#/responses/badRequest'
                "500":
                    $ref: '#/responses/internalServerError'
            summary: Add a book to the database.
            tags:
                - books
    /books/{id}:
        delete:
            description: This will delete a specific book by its ID.
            operationId: deleteBook
            produces:
                - application/json
            responses:
                "204":
                    $ref: '#/responses/noContent'
                "400":
                    $ref: '#/responses/badRequest'
                "404":
                    $ref: '#/responses/notFound'
                "500":
                    $ref: '#/responses/internalServerError'
            summary: Delete a book
            tags:
                - books
        get:
            description: This will return the details of a specific book by its ID.
            operationId: getBookDetail
            produces:
                - application/json
            responses:
                "200":
                    $ref: '#/responses/bookDetail'
                "400":
                    $ref: '#/responses/badRequest'
                "404":
                    $ref: '#/responses/notFound'
                "500":
                    $ref: '#/responses/internalServerError'
            summary: Get book details.
            tags:
                - books
        patch:
            description: This will update the specified book with the parameters specified in the request body.
            operationId: updateBook
            produces:
                - application/json
            responses:
                "200":
                    $ref: '#/responses/successResponse'
                "400":
                    $ref: '#/responses/badRequest'
                "404":
                    $ref: '#/responses/notFound'
                "409":
                    $ref: '#/responses/badRequest'
                "500":
                    $ref: '#/responses/internalServerError'
            summary: Update book details
            tags:
                - books
    /books/search:
        get:
            description: This will return books that match the search query parameter.
            operationId: searchBooks
            parameters:
                - description: Search query string to filter books by title or content
                  example: fantasy adventure
                  in: query
                  name: q
                  pattern: ^[a-zA-Z0-9 ]{1,50}$
                  type: string
                  x-go-name: Q
            produces:
                - application/json
            responses:
                "200":
                    $ref: '#/responses/bookSearch'
                "400":
                    $ref: '#/responses/badRequest'
                "500":
                    $ref: '#/responses/internalServerError'
            summary: Search for books.
            tags:
                - books
produces:
    - application/json
responses:
    badRequest:
        description: ""
        schema:
            properties:
                message:
                    description: The error message
                    example: badRequest
                    type: string
                    x-go-name: Message
            type: object
    bookSearch:
        description: bookSearchSuccessResponse is the response with a list of books that match the query parameter
        schema:
            properties:
                books:
                    description: The list of books
                    items:
                        $ref: '#/definitions/Book'
                    type: array
                    x-go-name: Books
            required:
                - books
            type: object
    internalServerError:
        description: Error response
        schema:
            properties:
                message:
                    description: The error message
                    example: Internal server error
                    type: string
                    x-go-name: Message
            type: object
    noContent:
        description: ""
        schema:
            type: object
    notFound:
        description: ""
        schema:
            properties:
                message:
                    description: The error message
                    example: requested resource not found
                    type: string
                    x-go-name: Message
            type: object
    paginatedBooksResponse:
        description: PaginatedBooksResponse is the response with a paginated list of books
        schema:
            properties:
                books:
                    description: The list of books
                    items:
                        $ref: '#/definitions/Book'
                    type: array
                    x-go-name: Books
                metadata:
                    $ref: '#/definitions/PaginationMetadata'
            required:
                - books
                - metadata
            type: object
schemes:
    - http
    - https
swagger: "2.0"
